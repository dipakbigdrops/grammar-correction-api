# Optimized Nginx configuration for 50K RPM under $100/month
# Minimal resource usage with aggressive optimization

events {
    worker_connections 2048;  # Reduced from 4096
    use epoll;
    multi_accept on;
    worker_rlimit_nofile 4096;
}

http {
    # Basic settings - optimized for cost
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 30;  # Reduced from 65
    keepalive_requests 1000;
    types_hash_max_size 1024;  # Reduced from 2048
    client_max_body_size 200M;  # For large ZIP files
    
    # Gzip compression - aggressive
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;  # Increased from 1024
    gzip_comp_level 6;  # Balanced compression
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Rate limiting - optimized for batch processing
    limit_req_zone $binary_remote_addr zone=api:10m rate=5r/s;  # Reduced from 10r/s
    limit_req_zone $binary_remote_addr zone=burst:10m rate=20r/s;  # Burst limit
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_conn conn_limit_per_ip 20;  # Max 20 connections per IP
    
    # Upstream API servers
    upstream api_backend {
        server api:8000 max_fails=3 fail_timeout=30s;
        keepalive 16;  # Reduced from 32
        keepalive_requests 1000;
        keepalive_timeout 30s;
    }
    
    # Main server block
    server {
        listen 80;
        server_name _;
        
        # Security headers - minimal
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        
        # API endpoints with optimized rate limiting
        location / {
            limit_req zone=api burst=10 nodelay;  # Reduced burst
            limit_req zone=burst burst=50 nodelay;
            
            proxy_pass http://api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts - optimized for batch processing
            proxy_connect_timeout 10s;  # Reduced from 30s
            proxy_send_timeout 300s;    # Increased for large batches
            proxy_read_timeout 300s;    # Increased for large batches
            
            # Buffer settings - optimized
            proxy_buffering on;
            proxy_buffer_size 2k;       # Reduced from 4k
            proxy_buffers 4 2k;         # Reduced from 8 4k
            proxy_busy_buffers_size 4k;
            proxy_temp_file_write_size 4k;
            
            # Connection settings
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
        
        # Health check endpoint - no rate limiting
        location /health {
            proxy_pass http://api_backend/health;
            access_log off;
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }
        
        # Metrics endpoint - no rate limiting
        location /metrics {
            proxy_pass http://api_backend/metrics;
            access_log off;
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }
        
        # Static files (if any) - aggressive caching
        location /static/ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }
        
        # Error pages
        error_page 429 /429.html;
        error_page 502 503 504 /50x.html;
        
        location = /429.html {
            internal;
            return 429 '{"error": "Rate limit exceeded. Please use batch processing with ZIP files."}';
            add_header Content-Type application/json;
        }
        
        location = /50x.html {
            internal;
            return 500 '{"error": "Service temporarily unavailable. Please try again later."}';
            add_header Content-Type application/json;
        }
    }
    
    # Logging - minimal for cost optimization
    access_log /var/log/nginx/access.log combined buffer=16k flush=5s;
    error_log /var/log/nginx/error.log warn;
    
    # Performance optimizations
    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
}
