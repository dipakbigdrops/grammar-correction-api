user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml font/truetype font/opentype 
               application/vnd.ms-fontobject image/svg+xml;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=burst_limit:10m rate=200r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

    # Upstream configuration for API servers
    upstream grammar_api {
        least_conn;
        keepalive 100;
        
        # API instances (will be auto-discovered in Docker Swarm/K8s)
        server api:8000 max_fails=3 fail_timeout=30s;
    }

    # Health check endpoint (no rate limiting)
    server {
        listen 80;
        server_name _;

        location /health {
            proxy_pass http://grammar_api/health;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            access_log off;
        }

        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Main API server
    server {
        listen 80 default_server;
        server_name api.yourdomain.com;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;

        # Rate limiting
        limit_req zone=api_limit burst=50 nodelay;
        limit_req zone=burst_limit burst=100 nodelay;
        limit_conn conn_limit 20;

        # API endpoints
        location / {
            proxy_pass http://grammar_api;
            proxy_http_version 1.1;
            
            # Headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # Buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Keep-alive
            proxy_set_header Connection "keep-alive";
            proxy_http_version 1.1;
        }

        # Static files (if any)
        location /static/ {
            alias /app/static/;
            expires 30d;
            add_header Cache-Control "public, immutable";
        }

        # Docs (lower rate limit)
        location /docs {
            limit_req zone=api_limit burst=10;
            proxy_pass http://grammar_api/docs;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }

        # OpenAPI JSON
        location /openapi.json {
            limit_req zone=api_limit burst=5;
            proxy_pass http://grammar_api/openapi.json;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }
    }

    # Monitoring endpoints (restricted access)
    server {
        listen 8080;
        server_name _;
        
        # Allow only from internal network
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;

        location /metrics {
            proxy_pass http://grammar_api/metrics;
        }

        location /flower {
            proxy_pass http://flower:5555;
        }

        location /prometheus {
            proxy_pass http://prometheus:9090;
        }

        location /grafana {
            proxy_pass http://grafana:3000;
        }
    }
}

